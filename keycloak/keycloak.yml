kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: keycloak
  annotations:
    description: An example template for trying out Keycloak on OpenShift
    iconClass: icon-sso
    openshift.io/display-name: Keycloak
    tags: keycloak
    version: 17.0.0-SNAPSHOT
objects:

# PostgreSQL

  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
      finalizers:
          - kubernetes.io/pvc-protection
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      volumeMode: Filesystem

  - kind: Secret
    apiVersion: v1    
    metadata:
      name: ${APPLICATION_NAME}-db
    type: Opaque
    data:
      postgres_password: ${POSTGRES_PASSWORD}
      postgres_user: ${POSTGRES_USER}
      postgres_database: ${POSTGRES_DATABASE}

  - kind: DeploymentConfig
    apiVersion: apps.openshift.io/v1
    metadata:
      name: ${APPLICATION_NAME}-db
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}-db
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            app: ${APPLICATION_NAME}-db
        spec:
          containers:
            - name: ${APPLICATION_NAME}-db
              image: postgresql
              ports:
                - containerPort: 5432
                  protocol: TCP
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_password
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_database
              securityContext:
                capabilities: {}
                privileged: false
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: ${APPLICATION_NAME}-db
          volumes:
            - name: ${APPLICATION_NAME}-db
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-db
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}-db
            from:
              kind: ImageStreamTag
              name: postgresql:10-el8
              namespace: openshift
          type: ImageChange
        - type: ConfigChange

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db
    spec:
      selector:
        app: ${APPLICATION_NAME}-db
      ports:
        - name: postgres
          port: 5432
          targetPort: 5432

  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-db-nodeport
    spec:
      externalTrafficPolicy: Cluster
      internalTrafficPolicy: Cluster
      ipFamilies:
        - IPv4
      ipFamilyPolicy: SingleStack
      ports:
        - nodePort: 30926
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        app: ${APPLICATION_NAME}-db
      sessionAffinity: None
      type: NodePort
  
  


# Keycloak
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        description: The web server's http port.
      labels:
        application: '${APPLICATION_NAME}'
      name: '${APPLICATION_NAME}'
    spec:
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        deploymentConfig: '${APPLICATION_NAME}'
  - apiVersion: v1
    id: '${APPLICATION_NAME}'
    kind: Route
    metadata:
      annotations:
        description: Route for application's service.
      labels:
        application: '${APPLICATION_NAME}'
      name: '${APPLICATION_NAME}'
    spec:
      host: '${HOSTNAME}'
      tls:
        termination: edge
      to:
        name: '${APPLICATION_NAME}'
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        application: '${APPLICATION_NAME}'
      name: '${APPLICATION_NAME}'
    spec:
      replicas: 1
      selector:
        deploymentConfig: '${APPLICATION_NAME}'
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            application: '${APPLICATION_NAME}'
            deploymentConfig: '${APPLICATION_NAME}'
          name: '${APPLICATION_NAME}'
        spec:
          containers:
            - env:
                - name: KEYCLOAK_ADMIN
                  value: '${KEYCLOAK_ADMIN}'
                - name: KEYCLOAK_ADMIN_PASSWORD
                  value: '${KEYCLOAK_ADMIN_PASSWORD}'
                - name: KC_PROXY
                  value: 'edge'
                - name: KC_DB
                  value: 'postgres'
                - name: KC_DB_URL_HOST
                  value: ${APPLICATION_NAME}-db
                - name: KC_DB_URL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_database
                - name: KC_DB_URL_PORT
                  value: '5432'
                - name: KC_DB_USERNAME
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_user
                - name: KC_DB_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}-db
                      key: postgres_password
              image: quay.io/keycloak/keycloak:21.1.2
              livenessProbe:
                failureThreshold: 100
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 60
              name: '${APPLICATION_NAME}'
              ports:
                - containerPort: 8080
                  protocol: TCP
              readinessProbe:
                failureThreshold: 300
                httpGet:
                  path: /
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
              securityContext:
                privileged: false
              volumeMounts:
                - mountPath: /opt/keycloak/data
                  name: empty
              args: ["start-dev"]
          volumes:
            - name: empty
              emptyDir: {}
      triggers:
        - type: ConfigChange
parameters:
  - name: APPLICATION_NAME
    displayName: Application Name
    description: The name for the application.
    value: keycloak
    required: true
  - name: KEYCLOAK_ADMIN
    displayName: Keycloak Administrator Username
    description: Keycloak Server administrator username
    generate: expression
    from: '[a-zA-Z0-9]{8}'
    required: true
  - name: KEYCLOAK_ADMIN_PASSWORD
    displayName: Keycloak Administrator Password
    description: Keycloak Server administrator password
    generate: expression
    from: '[a-zA-Z0-9]{8}'
    required: true
  - name: HOSTNAME
    displayName: Custom Route Hostname
    description: >-
      Custom hostname for the service route. Leave blank for default hostname,
      e.g.: <application-name>-<namespace>.<default-domain-suffix>
  # - name: NAMESPACE
  #   displayName: Namespace used for DNS discovery
  #   description: >-
  #     This namespace is a part of DNS query sent to Kubernetes API. This query
  #     allows the DNS_PING protocol to extract cluster members. This parameter
  #     might be removed once https://issues.jboss.org/browse/JGRP-2292 is
  #     implemented.
  #   required: true
  - name: POSTGRES_PASSWORD
    description: Password for the PostgreSQL database
    required: true
  - name: POSTGRES_USER
    description: Username for the PostgreSQL database
    required: true
  - name: POSTGRES_DATABASE
    description: Name for the PostgreSQL database
    required: true   
